package com.lemon.java.function.object;

/*
 *====== 非构造函数（普通函数）
 * 语法：
 * 		修饰符+函数返回值类型+函数名（参数类型 参数名，参数类型参数名）{函数体}
 * 		public int add(int a,int b) {
 *			  return a+b
// *		}
 *  修饰符：public,protected,默认修饰符，private
 *  函数返回值类型：八大基本类型;引用类型;空类型（void）
 * 	函数名：语法要去第一个字母小写
 * 	参数类型：变量的类型（八大基本类型/引用类型 ）
 * 
 * =======构造函数：是用来构造对象的函数
 * 1.无参构造函数(默认构造函数)：修饰符+函数名（）{}
 * 	语法：	public Member(){}
 * 2.带参构造函数:修饰符+函数名（参数类型 参数名，参数类型 参数名）{}
 * 	语法：	public Member(String mobilephone,String password){}
 *注意：不需要显示声明函数返回值类型；函数名必须跟类名保持一致。
 *
 * ☆：1.调用函数前首先要想到的是：准备对象--》通过调用构造函数
 * 2.函数（非构造函数）到底该怎么定义：返回值，参数列表定义的原则--》取决于 我们要定义的这个函数是为了解决什么问题
 * 
 * 调用无参构造函数--》最原始的对象
 * 调用带参构造函数--》调用带参的构造函数
 * 
 * 
 * 函数调用方式：
 * 构造函数的调用：只在一种情况下才会调用构造函数，即创建对象，调用构造函数时，用关键字new来调用；
 * 语法为：类名 对象名=new 类名（）
 * 
 * 非构造函数的调用，需要用到对象来调用（"对象."）
 * 用对象调用普通函数：mobile.setBrand("小米");
 * 
 * return:函数需要返回数据的时候用return; 一旦返回，那么函数就结束了。
 * 
 * 
 * 
 * 重载（overload）：两个函数名字一样；两个函数参数列表不一样 （参数个数不一样，参数类型顺序不一样，参数 类型不一样）
 * 重写（override）:重写是子类对父类允许访问的方法的实现过程进行重新编写，返回值和新参都不能改变
 *
 *java内存：
 * 方法是如何执行的，底层内存分配：
 * 1.方法进栈
 * 2.方法中的局部变量，基本类型直接保存在栈里；引用类型，变量名保存在栈里，对象保存在堆里，通过地址关联
 * 3.方法执行完，方法出栈，变量销毁，垃圾回收
 * 
 * 
 * 接口interface：
 * ===接口是一种规范和标准，他们可以约束类的行为，是一些方法特征的集合，但是没有方法的实现
 * 
 * interface-->定义接口；implements-->实现接口
 * class-->定义类；extend--->描述继承
 * 耦合===依赖
 * 
 * 抽象类：abstract
 * ===抽象类里既可以定义抽象的方法来约束子类的行为，还可以定义实现的方法，对于一些子类公有的实现方法，可以放在抽象类里，子类直接从抽象类继承
 * 			
 */

public class Function {
	public static void main(String[] args) {
		System.out.println("hi，函数开始了");
	}

}
